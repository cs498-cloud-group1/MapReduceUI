{"version":3,"sources":["components/home/index.jsx","api.js","components/result/index.jsx","components/list-results/index.jsx","components/create-job/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","react_default","a","createElement","react_router_dom","to","jobsUrl","ListResults","state","job","undefined","_this2","this","setState","loading","jobId","url","axios","get","then","response","data","isArray","find","api","match","params","resultId","finally","className","JSON","stringify","Component","jobs","orderBy","map","key","jobName","Date","createdAt","toLocaleString","CreateJob","form","reduce","handleChange","field","event","_this","Object","objectSpread","defineProperty","target","value","submit","formVals","values","some","isEmpty","alert","post","Item","history","push","catch","error","type","onChange","rows","onClick","withRouter","App","react_router","path","exact","component","Result","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAmBeA,EAhBF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,8BAEFJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,YAAT,uDCTJC,EACJ,mFCGmBC,6MACnBC,MAAQ,CACNC,SAAKC,sFAGa,IAAAC,EAAAC,KAClBA,KAAKC,SAAS,CAAEC,SAAS,IDCtB,SAAgBC,GACrB,IAAMC,EAAMV,EACZ,OAAOW,IAAMC,IAAIF,GAAKG,KAAK,SAAAC,GACzB,IAAMC,EAAOD,EAASC,KACtB,OAAIC,IAAQD,GACHA,EAAKE,KAAK,SAAAd,GAAG,OAAIA,EAAIM,QAAUA,IAE/BM,ICPTG,CACUZ,KAAKZ,MAAMyB,MAAMC,OAAOC,UAC/BR,KAAK,SAAAV,GAAG,OAAIE,EAAKE,SAAS,CAAEJ,UAC5BmB,QAAQ,kBAAMjB,EAAKE,SAAS,CAAEC,SAAS,uCAI1C,IAAML,EAAMG,KAAKJ,MAAMC,IACvB,OAAIG,KAAKJ,MAAMM,QACNb,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,WAGtB5B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,UACb5B,EAAAC,EAAAC,cAAA,WAAM2B,KAAKC,UAAUtB,EAAK,KAAM,YApBCuB,8BCEpBzB,qNACnBC,MAAQ,CACNyB,KAAM,uFAGY,IAAAtB,EAAAC,KAClBA,KAAKC,SAAS,CAAEC,SAAS,IFJpBG,IAAMC,IAAIZ,GAASa,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OEO/CF,KAAK,SAAAc,GAAI,OAAItB,EAAKE,SAAS,CAAEoB,WAC7BL,QAAQ,kBAAMjB,EAAKE,SAAS,CAAEC,SAAS,uCAI1C,IAAMmB,EAAOC,IAAQtB,KAAKJ,MAAMyB,KAAM,YAAa,QACnD,OAAIrB,KAAKJ,MAAMM,QACNb,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,WAGtB5B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,gBACb5B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,4BAGJF,EAAAC,EAAAC,cAAA,aACG8B,EAAKE,IAAI,SAAA1B,GAAG,OACXR,EAAAC,EAAAC,cAAA,MAAIiC,IAAK3B,EAAIM,OACXd,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAI,YAAcI,EAAIM,OACzBN,EAAI4B,SAAW,YAGpBpC,EAAAC,EAAAC,cAAA,UAAK,IAAImC,KAAK7B,EAAI8B,WAAWC,+BAnCJR,+CCAnCS,qNACJjC,MAAQ,CACNkC,KAAM,CACJL,QAAS,GACTrB,IAAK,GACLmB,IAAK,GACLQ,OAAQ,IAEV7B,SAAS,KAGX8B,aAAe,SAAAC,GAAK,OAAI,SAAAC,GACtBC,EAAKlC,SAAS,CACZ6B,KAAKM,OAAAC,EAAA,EAAAD,CAAA,GAAMD,EAAKvC,MAAMkC,KAAlBM,OAAAE,EAAA,EAAAF,CAAA,GAAyBH,EAAQC,EAAMK,OAAOC,cAItDC,OAAS,WHpBJ,IAAmBC,EGqBlBN,OAAOO,OAAOR,EAAKvC,MAAMkC,MAAMc,KAAKC,KACtCC,MAAM,iCAGRX,EAAKlC,SAAS,CAAEC,SAAS,KHzBHwC,EG2BTP,EAAKvC,MAAMkC,KH1BnBzB,IAAM0C,KAAKrD,EAASgD,GAAUnC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QG2B1DF,KAAK,SAAAC,GAEJ,IAAML,EAAQK,EAASL,OAAUK,EAASwC,MAAQxC,EAASwC,KAAK7C,MAChEgC,EAAK/C,MAAM6D,QAAQC,KAAK,YAAc/C,KAEvCgD,MAAM,SAAAC,GACLN,MACE,4DAA8DM,GAEhEjB,EAAKlC,SAAS,CAAEC,SAAS,gFAK7B,OAAIF,KAAKJ,MAAMM,QACNb,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,WAGtB5B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,cACb5B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SACE8D,KAAK,OACLb,MAAOxC,KAAKJ,MAAMkC,KAAKL,QACvB6B,SAAUtD,KAAKgC,aAAa,eAIlC3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SACE8D,KAAK,MACLb,MAAOxC,KAAKJ,MAAMkC,KAAK1B,IACvBkD,SAAUtD,KAAKgC,aAAa,WAIlC3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sCAC4B,IAC1BF,EAAAC,EAAAC,cAAA,YACEgE,KAAK,KACLf,MAAOxC,KAAKJ,MAAMkC,KAAKP,IACvB+B,SAAUtD,KAAKgC,aAAa,SAE7B,MAGL3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,0CACgC,IAC9BF,EAAAC,EAAAC,cAAA,YACEgE,KAAK,KACLf,MAAOxC,KAAKJ,MAAMkC,KAAKC,OACvBuB,SAAUtD,KAAKgC,aAAa,YAE7B,MAGL3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQ0B,UAAU,SAASuC,QAASxD,KAAKyC,QAAzC,sBAnGQrB,cA+GTqC,cAAW5B,GCnGX6B,mLAXX,OACErE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3E,IACjCE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,UAAWnE,IACzCN,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOC,KAAK,qBAAqBE,UAAWC,IAC5C1E,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAOC,KAAK,WAAWE,UAAWjC,YAPxBT,aCIE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStD,MACvB,2DCZNuD,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.6b8a4604.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = props => {\n  return (\n    <div>\n      <h3>Welcome to MapReduce with AWS Lambda! </h3>\n      <div>\n        <div>\n          <Link to=\"/create\"> Create a Map Reduce Job </Link>\n        </div>\n        <div>\n          <Link to=\"/results\"> View Results </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport isArray from 'lodash/isArray';\n\nconst jobsUrl =\n  'https://npbtinvj6l.execute-api.us-east-1.amazonaws.com/dev/jobs';\n\nexport function createJob(formVals) {\n  return axios.post(jobsUrl, formVals).then(response => response.data);\n}\n\nexport function getJobs() {\n  return axios.get(jobsUrl).then(response => response.data);\n}\n\nexport function getJob(jobId) {\n  const url = jobsUrl; // + '/' + jobId;\n  return axios.get(url).then(response => {\n    const data = response.data;\n    if (isArray(data)) {\n      return data.find(job => job.jobId === jobId);\n    } else {\n      return data;\n    }\n  });\n}\n","import React, { Component } from 'react';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nexport default class ListResults extends Component {\n  state = {\n    job: undefined\n  };\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    api\n      .getJob(this.props.match.params.resultId)\n      .then(job => this.setState({ job }))\n      .finally(() => this.setState({ loading: false }));\n  }\n\n  render() {\n    const job = this.state.job;\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"result\">\n        <pre>{JSON.stringify(job, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport orderBy from 'lodash/orderBy';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nexport default class ListResults extends Component {\n  state = {\n    jobs: []\n  };\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    api\n      .getJobs()\n      .then(jobs => this.setState({ jobs }))\n      .finally(() => this.setState({ loading: false }));\n  }\n\n  render() {\n    const jobs = orderBy(this.state.jobs, 'createdAt', 'desc');\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"list-results\">\n        <table>\n          <thead>\n            <tr>\n              <th>Job Name</th>\n              <th>Created Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {jobs.map(job => (\n              <tr key={job.jobId}>\n                <td>\n                  <Link to={'/results/' + job.jobId}>\n                    {job.jobName || 'missing'}\n                  </Link>\n                </td>\n                <td>{new Date(job.createdAt).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nclass CreateJob extends Component {\n  state = {\n    form: {\n      jobName: '',\n      url: '',\n      map: '',\n      reduce: ''\n    },\n    loading: false\n  };\n\n  handleChange = field => event => {\n    this.setState({\n      form: { ...this.state.form, [field]: event.target.value }\n    });\n  };\n\n  submit = () => {\n    if (Object.values(this.state.form).some(isEmpty)) {\n      alert('You must fill out all fields');\n      return;\n    }\n    this.setState({ loading: true });\n    api\n      .createJob(this.state.form)\n      .then(response => {\n        // go to result page now\n        const jobId = response.jobId || (response.Item && response.Item.jobId);\n        this.props.history.push('/results/' + jobId);\n      })\n      .catch(error => {\n        alert(\n          'There was an error submitting your job. Error message: \\n' + error\n        );\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"create-job\">\n        <table>\n          <thead>\n            <tr>\n              <th>Field</th>\n              <th>Input</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Job Name</td>\n              <td>\n                <input\n                  type=\"text\"\n                  value={this.state.form.jobName}\n                  onChange={this.handleChange('jobName')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Data URL</td>\n              <td>\n                <input\n                  type=\"url\"\n                  value={this.state.form.url}\n                  onChange={this.handleChange('url')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Map Function</td>\n              <td>\n                function map(key, value) {'{'}\n                <textarea\n                  rows=\"10\"\n                  value={this.state.form.map}\n                  onChange={this.handleChange('map')}\n                />\n                {'}'}\n              </td>\n            </tr>\n            <tr>\n              <td>Reduce</td>\n              <td>\n                function reduce(key, values) {'{'}\n                <textarea\n                  rows=\"10\"\n                  value={this.state.form.reduce}\n                  onChange={this.handleChange('reduce')}\n                />\n                {'}'}\n              </td>\n            </tr>\n            <tr>\n              <td />\n              <td>\n                <button className=\"submit\" onClick={this.submit}>\n                  Submit\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateJob);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/home';\nimport Result from './components/result';\nimport ListResults from './components/list-results';\nimport CreateJob from './components/create-job';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/results/\" exact component={ListResults} />\n        <Route path=\"/results/:resultId\" component={Result} />\n        <Route path=\"/create/\" component={CreateJob} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}