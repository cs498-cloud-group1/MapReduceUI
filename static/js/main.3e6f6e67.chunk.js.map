{"version":3,"sources":["components/home/index.jsx","api.js","components/result/index.jsx","components/list-results/index.jsx","components/create-job/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","react_default","a","createElement","react_router_dom","to","jobsUrl","aceOptions","theme","mode","height","highlightActiveLine","setOptions","showLineNumbers","tabSize","editorProps","$blockScrolling","ListResults","state","job","undefined","refresh","_this","setState","loading","jobId","url","axios","get","then","response","data","isArray","find","api","match","params","resultId","finally","this","className","createdAt","updatedAt","status","map","reduce","bucket","fileName","jobName","Date","toLocaleString","toUpperCase","href","onClick","lib_default","Object","assign","name","readOnly","value","Component","jobs","_this2","orderBy","key","defaultMap","defaultReduce","CreateJob","form","handleChange","field","event","val","target","objectSpread","defineProperty","submit","formVals","values","some","isEmpty","alert","post","Item","history","push","catch","error","type","onChange","withRouter","App","basename","react_router","path","exact","component","Result","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e6f6e67.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = props => {\n  return (\n    <div>\n      <h3>Welcome to MapReduce with AWS Lambda! </h3>\n      <div>\n        <div>\n          <Link to=\"/create\"> Create a Map Reduce Job </Link>\n        </div>\n        <div>\n          <Link to=\"/results\"> View Results </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport isArray from 'lodash/isArray';\n\nconst jobsUrl =\n  'https://npbtinvj6l.execute-api.us-east-1.amazonaws.com/dev/jobs';\n\nexport function createJob(formVals) {\n  return axios.post(jobsUrl, formVals).then(response => response.data);\n}\n\nexport function getJobs() {\n  return axios.get(jobsUrl).then(response => response.data);\n}\n\nexport function getJob(jobId) {\n  const url = jobsUrl + '/' + jobId;\n  return axios.get(url).then(response => {\n    const data = response.data;\n    if (isArray(data)) {\n      return data.find(job => job.jobId === jobId);\n    } else {\n      return data;\n    }\n  });\n}\n","import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nconst aceOptions = {\n  theme: 'chrome',\n  mode: 'javascript',\n  height: '150px',\n  highlightActiveLine: true,\n  setOptions: {\n    showLineNumbers: true,\n    tabSize: 2\n  },\n  editorProps: { $blockScrolling: true }\n};\n\nexport default class ListResults extends Component {\n  state = {\n    job: undefined\n  };\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  refresh = () => {\n    this.setState({ loading: true });\n    api\n      .getJob(this.props.match.params.resultId)\n      .then(job => this.setState({ job }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  render() {\n    const job = this.state.job || {};\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    const {\n      createdAt,\n      updatedAt,\n      status,\n      jobId,\n      map,\n      reduce,\n      bucket,\n      fileName,\n      jobName\n    } = job;\n    return (\n      <div className=\"result__root\">\n        <div className=\"body\">\n          <div className=\"header\">\n            <div>\n              <div className=\"jobName\">{jobName}</div>\n              <div className=\"subHeader\">\n                <div className=\"label\">Created On:</div>\n                <div className=\"value\">\n                  {new Date(createdAt).toLocaleString()}\n                </div>\n                <div className=\"label\">Last Update:</div>\n                <div className=\"value\">\n                  {new Date(updatedAt).toLocaleString()}\n                </div>\n              </div>\n              <div>\n                Bucket: {bucket}, File: {fileName}, job Id: {jobId}\n              </div>\n            </div>\n            <div className=\"status\">\n              <div>\n                <div>\n                  Status:\n                  <span className=\"value\">\n                    {status ? status.toUpperCase() : ''}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"refresh\">\n              {status === 'done' ? (\n                <a\n                  href={\n                    'https://npbtinvj6l.execute-api.us-east-1.amazonaws.com/dev/results/' +\n                    jobId\n                  }\n                >\n                  {' '}\n                  Results{' '}\n                </a>\n              ) : (\n                <button onClick={this.refresh}> Refresh </button>\n              )}\n            </div>\n          </div>\n          <div className=\"function\">\n            <div className=\"function_name\">Map:</div>\n            <AceEditor\n              name=\"map-function\"\n              readOnly\n              value={map}\n              {...aceOptions}\n            />\n          </div>\n          <div className=\"function\">\n            <div className=\"function_name\">Reduce:</div>\n            <AceEditor\n              name=\"reduce-function\"\n              readOnly\n              value={reduce}\n              {...aceOptions}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport orderBy from 'lodash/orderBy';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nexport default class ListResults extends Component {\n  state = {\n    jobs: []\n  };\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    api\n      .getJobs()\n      .then(jobs => this.setState({ jobs }))\n      .finally(() => this.setState({ loading: false }));\n  }\n\n  render() {\n    const jobs = orderBy(this.state.jobs, 'createdAt', 'desc');\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"list-results\">\n        <table>\n          <thead>\n            <tr>\n              <th>Job Name</th>\n              <th>Created Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {jobs.map(job => (\n              <tr key={job.jobId}>\n                <td>\n                  <Link to={'/results/' + job.jobId}>\n                    {job.jobName || 'missing'}\n                  </Link>\n                </td>\n                <td>{new Date(job.createdAt).toLocaleString()}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\nimport 'brace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/chrome';\nimport AceEditor from 'react-ace';\n\nimport * as api from '../../api';\n\nimport '../common.scss';\nimport './index.scss';\n\nconst defaultMap = `function map(line, emit) {\n\n}`;\n\nconst defaultReduce = `function reduce(key, values, emit) {\n\n}`;\n\nconst aceOptions = {\n  theme: 'chrome',\n  mode: 'javascript',\n  height: '150px',\n  highlightActiveLine: true,\n  setOptions: {\n    showLineNumbers: true,\n    tabSize: 2\n  },\n  editorProps: { $blockScrolling: true }\n};\n\nclass CreateJob extends Component {\n  state = {\n    form: {\n      jobName: '',\n      bucket: '',\n      fileName: '',\n      map: defaultMap,\n      reduce: defaultReduce\n    },\n    loading: false\n  };\n\n  handleChange = field => event => {\n    const val = event.target ? event.target.value : event;\n    this.setState({\n      form: { ...this.state.form, [field]: val }\n    });\n  };\n\n  submit = () => {\n    if (Object.values(this.state.form).some(isEmpty)) {\n      alert('You must fill out all fields');\n      return;\n    }\n    this.setState({ loading: true });\n    api\n      .createJob(this.state.form)\n      .then(response => {\n        // go to result page now\n        const jobId = response.jobId || (response.Item && response.Item.jobId);\n        this.props.history.push('/results/' + jobId);\n      })\n      .catch(error => {\n        alert(\n          'There was an error submitting your job. Error message: \\n' + error\n        );\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"create-job\">\n        <table>\n          <thead>\n            <tr>\n              <th>Field</th>\n              <th>Input</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Job Name</td>\n              <td>\n                <input\n                  type=\"text\"\n                  value={this.state.form.jobName}\n                  onChange={this.handleChange('jobName')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Bucket Name</td>\n              <td>\n                <input\n                  type=\"text\"\n                  value={this.state.form.url}\n                  onChange={this.handleChange('bucket')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>File Name</td>\n              <td>\n                <input\n                  type=\"text\"\n                  value={this.state.form.url}\n                  onChange={this.handleChange('fileName')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Map Function\n                <div className=\"info\">Please use JavaScript</div>\n              </td>\n              <td>\n                <AceEditor\n                  name=\"map-function\"\n                  onChange={this.handleChange('map')}\n                  value={this.state.form.map}\n                  {...aceOptions}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Reduce Function\n                <div className=\"info\">Please use JavaScript</div>\n              </td>\n              <td>\n                <AceEditor\n                  name=\"reduce-function\"\n                  onChange={this.handleChange('reduce')}\n                  value={this.state.form.reduce}\n                  {...aceOptions}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td />\n              <td>\n                <button className=\"submit\" onClick={this.submit}>\n                  Submit\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateJob);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/home';\nimport Result from './components/result';\nimport ListResults from './components/list-results';\nimport CreateJob from './components/create-job';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"/MapReduceUI\">\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/results/\" exact component={ListResults} />\n        <Route path=\"/results/:resultId\" component={Result} />\n        <Route path=\"/create/\" component={CreateJob} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}