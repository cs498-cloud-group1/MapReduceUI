{"version":3,"sources":["components/home/index.jsx","components/result/index.jsx","api.js","components/create-job/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","react_default","a","createElement","react_router_dom","to","Result","resultId","match","params","concat","jobsUrl","CreateJob","state","form","jobName","url","map","reduce","loading","handleChange","field","event","_this","setState","Object","objectSpread","defineProperty","target","value","submit","formVals","values","some","isEmpty","alert","axios","post","then","response","data","jobId","Item","history","push","catch","error","this","className","type","onChange","rows","onClick","Component","withRouter","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a455b73.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = props => {\n  return (\n    <div>\n      <h3>Welcome to MapReduce with AWS Lambda! </h3>\n      <div>\n        <Link to=\"/create\"> Create a Map Reduce Job </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Result = props => {\n  const { resultId } = props.match.params;\n\n  return (\n    <div>{`Welcome to Result page ${\n      resultId ? `for result ${resultId}` : ''\n    }`}</div>\n  );\n};\n\nexport default Result;\n","import axios from 'axios';\n\nconst jobsUrl =\n  'https://npbtinvj6l.execute-api.us-east-1.amazonaws.com/dev/jobs';\n\nexport function createJob(formVals) {\n  return axios.post(jobsUrl, formVals).then(response => response.data);\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\n\nimport * as api from '../../api';\n\nimport './index.scss';\n\nclass CreateJob extends Component {\n  state = {\n    form: {\n      jobName: '',\n      url: '',\n      map: '',\n      reduce: ''\n    },\n    loading: false\n  };\n\n  handleChange = field => event => {\n    this.setState({\n      form: { ...this.state.form, [field]: event.target.value }\n    });\n  };\n\n  submit = () => {\n    if (Object.values(this.state.form).some(isEmpty)) {\n      alert('You must fill out all fields');\n      return;\n    }\n    this.setState({ loading: true });\n    api\n      .createJob(this.state.form)\n      .then(response => {\n        // go to result page now\n        const jobId = response.jobId || (response.Item && response.Item.jobId);\n        this.props.history.push('/result/' + jobId);\n      })\n      .catch(error => {\n        alert(\n          'There was an error submitting your job. Error message: \\n' + error\n        );\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className=\"loader\" />;\n    }\n    return (\n      <div className=\"create-job\">\n        <table>\n          <thead>\n            <tr>\n              <th>Field</th>\n              <th>Input</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Job Name</td>\n              <td>\n                <input\n                  type=\"text\"\n                  value={this.state.form.jobName}\n                  onChange={this.handleChange('jobName')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Data URL</td>\n              <td>\n                <input\n                  type=\"url\"\n                  value={this.state.form.url}\n                  onChange={this.handleChange('url')}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Map Function</td>\n              <td>\n                function map(key, value) {'{'}\n                <textarea\n                  rows=\"10\"\n                  value={this.state.form.map}\n                  onChange={this.handleChange('map')}\n                />\n                {'}'}\n              </td>\n            </tr>\n            <tr>\n              <td>Reduce</td>\n              <td>\n                function reduce(key, values) {'{'}\n                <textarea\n                  rows=\"10\"\n                  value={this.state.form.reduce}\n                  onChange={this.handleChange('reduce')}\n                />\n                {'}'}\n              </td>\n            </tr>\n            <tr>\n              <td />\n              <td>\n                <button className=\"submit\" onClick={this.submit}>\n                  Submit\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateJob);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './components/home';\nimport Result from './components/result';\nimport CreateJob from './components/create-job';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/result/\" exact component={Result} />\n        <Route path=\"/result/:resultId\" component={Result} />\n        <Route path=\"/create/\" component={CreateJob} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}